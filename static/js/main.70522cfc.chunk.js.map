{"version":3,"sources":["components/Gallery.js","components/Global.js","App.js","serviceWorker.js","index.js"],"names":["Gallery","className","this","props","items","map","item","index","volumeInfo","title","imageLinks","infoLink","key","href","target","src","undefined","thumbnail","alt","Component","Global","state","query","fetch","method","then","response","json","setState","FormGroup","InputGroup","FormControl","type","placeholder","onChange","event","value","onKeyPress","search","Append","onClick","Button","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iUAyBeA,E,iLAnBP,OACI,yBAAKC,UAAU,WAEPC,KAAKC,MAAMC,MAAMC,KAAI,SAACC,EAAMC,GAAW,IAAD,EACED,EAAKE,WAApCC,EAD6B,EAC7BA,MAAOC,EADsB,EACtBA,WAAYC,EADU,EACVA,SACxB,OACA,uBAAGC,IAAKL,EAAON,UAAY,OAAOY,KAAMF,EAAUG,OAAO,UACrD,yBAAKC,SAAoBC,IAAfN,EAA2BA,EAAWO,UARhD,wFAQ4EC,IAAK,GAAGjB,UAAU,cAC9F,yBAAKA,UAAU,aACdQ,Y,GAbPU,aC2CPC,E,YAxCX,WAAYjB,GAAQ,IAAD,8BACf,4CAAMA,KACDkB,MAAQ,CACTC,MAAO,GACPlB,MAAO,IAJI,E,sEAOT,IAAD,OAELmB,MAAM,GAAD,OADY,kDACZ,OAAerB,KAAKmB,MAAMC,OAAS,CAAEE,OAAQ,QAC7CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACF,IAAIvB,EAAQuB,EAAKvB,MACjB,EAAKwB,SAAS,CAACxB,e,+BAIjB,IAAD,OACL,OACI,yBAAKH,UAAU,UACX,6CACA,kBAAC4B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,oBACjCC,SAAU,SAAAC,GAAK,OAAI,EAAKP,SAAS,CAAEN,MAAOa,EAAMrB,OAAOsB,SACvDC,WAAY,SAAAF,GACU,UAAdA,EAAMvB,KACN,EAAK0B,YAGjB,kBAACR,EAAA,EAAWS,OAAZ,CAAmBC,QAAS,kBAAM,EAAKF,WACnC,kBAACG,EAAA,EAAD,CAAQC,QAAQ,qBAAhB,aAIZ,kBAAC,EAAD,CAAStC,MAAOF,KAAKmB,MAAMjB,a,GApCtBe,aCSNwB,MARf,WACE,OACE,yBAAK1C,UAAU,OACb,kBAAC,EAAD,QCIc2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.70522cfc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Gallery extends Component {\r\n\r\n    render() {\r\n        let alternateImage ='https://www.adazing.com/wp-content/uploads/2019/02/open-book-clipart-06-1-300x300.png';\r\n        return (\r\n            <div className='Gallery'>\r\n                {\r\n                    this.props.items.map((item, index) => {\r\n                        let {title, imageLinks, infoLink} = item.volumeInfo;\r\n                        return (\r\n                        <a key={index} className = 'book' href={infoLink} target=\"_blank\">\r\n                            <img src={imageLinks !== undefined ? imageLinks.thumbnail : alternateImage} alt= '' className='bookImage'/>\r\n                            <div className='book-text'>\r\n                            {title}\r\n                            </div>\r\n                        </a>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Gallery;","import React, { Component } from 'react';\r\nimport { FormGroup, FormControl, InputGroup, Button } from 'react-bootstrap';\r\nimport Gallery from './Gallery';\r\n\r\nclass Global extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            query: '',\r\n            items: []\r\n        }\r\n    }\r\n    search() {\r\n        const BASE_URL = 'https://www.googleapis.com/books/v1/volumes?q=';\r\n        fetch(`${BASE_URL}${this.state.query}`, { method: 'GET' })\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                let items = json.items;\r\n                this.setState({items});\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='Global'>\r\n                <h2>Book Explorer</h2>\r\n                <FormGroup>\r\n                    <InputGroup>\r\n                        <FormControl type='text' placeholder='Search for a book'\r\n                            onChange={event => this.setState({ query: event.target.value })}\r\n                            onKeyPress={event => {\r\n                                if (event.key === 'Enter') {\r\n                                    this.search();\r\n                                }\r\n                            }} />\r\n                        <InputGroup.Append onClick={() => this.search()}>\r\n                            <Button variant=\"outline-secondary\">Search</Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </FormGroup>\r\n                <Gallery items={this.state.items}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Global;","import React from 'react';\nimport './App.css';\n\nimport Global from './components/Global';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Global/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}